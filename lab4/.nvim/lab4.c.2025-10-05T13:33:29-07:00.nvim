#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#define BUF_SIZE 256
// header for memory block
struct header {
  uint64_t size;
  struct header *next;
};

void handle_error(const char *msg) {
  perror(msg);
  exit(EXIT_FAILURE);
}

void print_out(char *format, void *data, size_t data_size) {
  char buf[BUF_SIZE];
  ssize_t len = snprintf(buf, BUF_SIZE, format,
                         data_size == sizeof(uint64_t) ? *(uint64_t *)data
                                                       : *(void **)data);
  if (len < 0) {
    handle_error("snprintf");
  }
  write(STDOUT_FILENO, buf, len);
}

int main() {
  // allocate 256 bytes of memory in heap
  void *heap_start = sbrk(256);
  if (heap_start == (void *)-1) {
    perror("sbrk failed");
    exit(EXIT_FAILURE);
  }

  // initialize two blocks of 128  bytes in that memory
  struct header *block1 = (struct header *)heap_start;
  struct header *block2 = (struct header *)(heap_start + 128);

  // initialize the values of those blocks
  block1->size = 128;
  block1->next = NULL;
  block2->size = 128;
  block2->next = block1;

  print_out("first block address:  %p\n", &block1, sizeof(block1));
  print_out("second block address: %p\n", &block2, sizeof(block2));
  print_out("first block size:     %llu\n", &block1->size,
            sizeof(block1->size));
  print_out("first block next:     %p\n", &block1->next, sizeof(block1->next));
  print_out("second block size:    %llu\n", &block2->size,
            sizeof(block2->size));
  print_out("second block next:    %p\n", &block2->next, sizeof(block2->next));

  // initialie the data areas:
  // Add this after your print_out calls
  void *data1_start = (char *)block1 + sizeof(struct header);
  void *data2_start = (char *)block2 + sizeof(struct header);
  size_t data_size = 128 - sizeof(struct header);

  // Loop to fill block1's data with 0s
  for (size_t i = 0; i < data_size; ++i) {
    // Calculate the address of the i-th byte
    char *current_byte = (char *)data1_start + i;
    // Dereference the pointer to set the value at that address
    *current_byte = 0;
  }

  // Loop to fill block2's data with 1s
  for (size_t i = 0; i < data_size; ++i) {
    char *current_byte = (char *)data2_start + i;
    *current_byte = 1;
  }

  // Print data for block 1
  for (size_t i = 0; i < data_size; ++i) {
    // Trick: Copy the single byte into an 8-byte uint64_t
    // to match what print_out is designed to handle.
    uint64_t temp_val = *((char*)data1_start + i);
    print_out("%llu\n", &temp_val, sizeof(temp_val));
  }

  // Print data for block 2
  for (size_t i = 0; i < data_size; ++i) {
    uint64_t temp_val = *((char*)data2_start + i);
    print_out("%llu\n", &temp_val, sizeof(temp_val));
  }

  return 0;
}
